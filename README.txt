-Описание приложения.
-Основные моменты работы.
-Отсутствует.


==========================================================================================
                                            ОПИСАНИЕ ПРИЛОЖЕНИЯ
==========================================================================================
Простая модель банковской системы. Реализованы АПИ для пользователя и админа (без данных ролей никак).
В функционал пользователя включены возможности получения текущей информации, удаления телефона или почты,
а также их обновление.

Функционал менеджера (админа) шире и включает:
    -создание пользователей;
    -получение текущей информации;
    -получение всех пользователей (пагинация - нужен параметр, пример ниже);
    -фильтрация пользователей по параметрам (-//-);
    -удаление пользователя;

Реализовано 4 контроллера (3 RestController, 1 Controller):
    ManagerController - только для admin
    UserController - только user
    CommonController - общедоступный
    PageController - возвращает страницы в зависимости от роли (редирект реализован в SecurityConfiguration)
        последний, в свою очередь, демонстрационный.

Создано несколько репозиториев для хранения данных пользователей, телефонов и почт.
О работе БД ниже.

В программе также реализован механизм аутентификации и авторизации через JSON Web Token
(папка security - общая настройка security configuration и webtoken - система фильтрации и сервис создания токенов).

После запуска доступна документация основным компонентов (swagger) по ссылкам:

    - ui версия: /effective-mobile-documentation
    - json формат: /effective-mobile-api-docs

(также указаны в application.properties).
Авторизация для них не требуется.

Оставлены комментарии примера логирования, но код потребует доп параметров:
зависимость slf4j в pom.xml и аннотаций (@Slf4j) над классами, реализующими логирование.

БД поднималась в контейнере (команда создания будет в следующем разделе).
Представленные сущности: пользователь, телефоны и почты - это связанные таблицы.

==========================================================================================
                                            ОСНОВНЫЕ МОМЕНТЫ РАБОТЫ
==========================================================================================
Основные параметры указаны в application.properties
Имя, пароль, URL к БД, диалект и драйвер.

Консольная команда создания Docker-контейнера на базе image postgres:latest :
docker run --name effective-mobile-db -p 5432:5432 -e POSTGRES_USER=root -e POSTGRES_PASSWORD=1234 -e POSTGRES_DB=efmob -d postgres

Параметр POSTGRES_USER должен совпадать с пользователем в application.properties;
аналогично POSTGRES_PASSWORD с паролем;
аналогично POSTGRES_DB с окончанием URL;
Порты выбраны стандартные (внешний:внутренний);

После создания БД и запуска приложения в ней будут автоматически созданы нужные таблицы
и сразу внесен один пользователь - admin_1 с таким же паролем
    (описание сущности: com/example/effectivemobile2/repo/DataBaseInitializer.java);

Для проверки функционала работы с БД можно воспользоваться Postman (или браузер - localhost:8090);
Для получения токена ->
    /common/authenticate

Основные JSON объекты прописаны в папке dto и entity/LoginForm (record).

Результат состояния БД после некоторых методов можно проверить и в консоли:
    docker exec -ti effective-mobile-db psql -U root -d efmob - подключение к контейнеру
    select * from bank_user; - команда внутри контейнера, вывод всех записей (телефоны и почты - отдельные таблицы)

При вводе повторяющихся логинов, номеров телефона и почты - будет выброшена ошибка.

Примеры запросов (postman, браузер):
    admin/
    - фильтрация:
        localhost:8090/admin/filter?filterBy=EMAIL&param=admin1@mail.com
        localhost:8090/admin/filter?filterBy=PHONE&param=1 (без "+")
        localhost:8090/admin/filter?filterBy=FULL_NAME&param=admin+1&page=0
        localhost:8090/admin/filter?filterBy=BIRTH_DATE&param=01-01-2000

    - удаление, получение списка, создание нового пользователя:
        localhost:8090/admin/delete_user (в тело JSON: {"id": 7505})
        localhost:8090/admin/get_all
        localhost:8090/admin/create_user (в тело: {
                                                      "login": "user",
                                                      "password": "password",
                                                      "initialAmount": 1,
                                                      "phoneNumber":"+555",
                                                      "email": "user@mail.com",
                                                      "birthDate": "01-01-2005",
                                                      "fullName": "name user 1",
                                                      "roles":"USER"
                                                  }
                                    +добавить токен)

    user/
    - удаление и обновление параметра:
        localhost:8090/user/update_param (в тело:{       //пример
                                                         "id": 7102,
                                                         "emailUpdate": "email@mail.com",
                                                         "phoneUpdate": "+1234567"
                                                 })

        localhost:8090/user/delete_param (в тело: {
                                                          "id": 7102,
                                                          "emailDelete": "upd1@mail.com"
                                                  })

==========================================================================================
                                            ОТСУТСТВУЕТ
==========================================================================================
Функциональные:
    Функционал пополнения средств и транзакции;
    Метод роста депозитов каждую минуту;
    Не все ошибки отлавливаются и обрабатываются;
    Не всем данным сделана проверка (можно и нужно сделать regexp на каждый точечный параметр)
        при создании/записи в БД (кроме повтора логина, телефона и почты)

Нефункциональная составляющая:
    Логирование (только пример комментариями);
    Тесты на функционал трансфера средств между аккаунтами;
